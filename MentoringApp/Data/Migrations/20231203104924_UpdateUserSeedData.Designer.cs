// <auto-generated />
using System;
using MentoringApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentoringApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231203104924_UpdateUserSeedData")]
    partial class UpdateUserSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AreaOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IntroductionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "612bc8ce-4088-4233-89be-973a62d45311",
                            CourseName = "MSc Computing",
                            Email = "harry@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Harry Smith",
                            PasswordHash = "AQAAAAEAACcQAAAAEOpPjWtagA70/7tsu2NwLTpPdAvlnRNA/bLQ1BbNtx2Yq6tNgkvkV5tNuTw15CecSg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "a4bab67f-a8f9-4bbf-a0bd-2f264525dd32",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "harry@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "7ea5a56a-6827-4fba-9dab-785db2d5696e",
                            CourseName = "BSc Computer Science",
                            Email = "jiang@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Shuying Jiang",
                            NormalizedEmail = "JIANG@EXAMPLE.COM",
                            NormalizedUserName = "JIANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5uEFn7/RDZYP56oIJKnZKQDvQ4JmqI1+sN4gesoCQFmep04aw6030A3n1XVbVtKQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "882205c0-614d-4c19-b3fa-3ea046ed7fec",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "jiang@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "31e480aa-ff22-4ced-be60-6a1548edc8a3",
                            CourseName = "MSc Big Data Analytics",
                            Email = "hakeem@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hakeem Kae-Kazim",
                            PasswordHash = "AQAAAAEAACcQAAAAELMEQKQNkRgGFc2BpfqzyiFx4jO+b0aIxwg60nxM0R+3S7XNty1Q8zXJ7RlDamYq2Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "b43dbf4d-afc2-47c1-a2ba-7e6e81740867",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "hakeem@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "00fcee52-10c1-466f-83b2-3d43968e8a12",
                            CourseName = "BA History",
                            Email = "priyanka@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Priyanka Chopra",
                            PasswordHash = "AQAAAAEAACcQAAAAEG7DZkGWSJ3n0ch6L4W9l5Nk7RKelqz5gW8sM72wu947IAeNJgUWgdUZObPZhS6GrQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "9e503760-ce2b-4a14-9812-db851d2381c2",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "priyanka@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "d6426459-0e64-4a91-9750-fb64f91ccf55",
                            CourseName = "BA Politics",
                            Email = "robin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Robin Hawthorn",
                            PasswordHash = "AQAAAAEAACcQAAAAELo4XFXnCn/93V7SDR6kOJxzS/bX6Fz7wThoqXOnjlhV5uBtH9AKbLBQBNMBs58YSg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "d5e790c1-d651-4720-94bc-e7334df5f525",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "robin@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "0ba20631-be0e-4193-ac1c-36fe2ed79c8b",
                            CourseName = "BSc Management Studies",
                            Email = "jun@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jun Matsumoto",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVk8cxm3eX6TVmj4YUhRSj/cR126BlnsV43AusYv3MGFKprRuKIILgiFCs72kPDhw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "42bd9302-7ad1-4267-9d0f-9b8acf374073",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "jun@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "5ba5ecbb-2e49-4796-920f-899420fe8047",
                            CourseName = "BSc Zoology",
                            Email = "maria@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Maria Spiridakos",
                            PasswordHash = "AQAAAAEAACcQAAAAEChUO2naeM6ABzeDlYyGa5sZQoLxxV+K2tG7efuKGwgrmdiRuO22NadCuVEsoisEig==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "aacf5e05-d244-420b-a188-819d840cdee0",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "maria@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "c385cb27-c11a-4885-b8c5-d6a1627f29af",
                            CourseName = "MSc Business Analytics",
                            Email = "john@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PasswordHash = "AQAAAAEAACcQAAAAEECiGAsmsKPRvkhcPFi0gxCaL28ldcz7eA9vslrvKoZE4i+YiDp6go1grvZzn8g1WQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "efc77a72-7928-41f0-9a6f-4144ec0250cd",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "john@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "383c9ac7-e7d9-4e3a-879a-c901379617d6",
                            CourseName = "BSc Chemistry",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emily White",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRD/v7wAmldQqn5ej6BoYBcE3y7zqL/LCXjXi6jhZs/+15ZeSbQRjB389rve9ad0w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "2ddfc326-71a9-4246-9668-b8214361e675",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "emily@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "28816701-b4de-4d64-a360-edd4d34301d1",
                            CourseName = "MSc IT Management",
                            Email = "bruno@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bruno Silva",
                            PasswordHash = "AQAAAAEAACcQAAAAELkDZTWPxhJt+CRvNlPyM6JSAFC2aTNOy705MBu4OzMi1P6Q+mj0VvG89E8iT1LFvA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "de212718-b7e8-46f0-9aa3-e815baf855ae",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "bruno@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "7906ef13-ad6a-4721-9b08-05aa9e27306d",
                            CourseName = "BSc Computer Science for Games",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Claire Martin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBr45zBvmsWvl6xrYUbuYvhmETFadKckKc7VkfuQD7pmsAqyIlH2jWNwub/J9OcGEw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "719fe91b-2835-4cf7-8c40-e07c0a64af2d",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "claire@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "c9374a66-29b7-4606-962d-5cbcd2e5c8e0",
                            CourseName = "BSc Artificial Intelligence",
                            Email = "qasim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Qasim Khan",
                            PasswordHash = "AQAAAAEAACcQAAAAECCHx6TW+x5AoYYZ+UJlqUnDfZ7ubnn4t7+WHbLgVvyXT2gNTv3ivtM94vu/OZ9uKA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "78a05e38-944f-4c82-96a3-680d00f2e9bf",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "qasim@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "01b20924-23b1-46da-86ce-7fb4354db21f",
                            CourseName = "BSc Chemistry",
                            Email = "minho@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Min-ho Lee",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWxQIgts0h1UOEnIs5D/uCdu/TSvnfdIfe/oT8r7SvKLGhlvb4Gw3zSvTmbG9CReQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "f765d6e0-df20-4580-a284-0e7cb931b8b5",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "minho@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Creative Arts",
                            ConcurrencyStamp = "5ce0f38e-7b86-4ab0-a1d2-e5cebda7a75d",
                            CourseName = "BA Printmaking",
                            Email = "olga@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Olga Nowak",
                            PasswordHash = "AQAAAAEAACcQAAAAEG06n686rnm4/4IE/3ypctnDiWQxqHG3ccsOhOONHOYkE/C7+bl4RJ4l/MxrLUDCUg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "859f460d-e790-41bd-8aef-7ac61abb0418",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "olga@example.com"
                        });
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sheffield",
                            Name = "Sheffield Hallam University"
                        },
                        new
                        {
                            Id = 2,
                            City = "Sheffield",
                            Name = "The University of Sheffield"
                        },
                        new
                        {
                            Id = 3,
                            City = "Leeds",
                            Name = "Leeds Beckett University"
                        },
                        new
                        {
                            Id = 4,
                            City = "Oxford",
                            Name = "Oxford University"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("ReceivedConnectionRequests")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.Student", "Student")
                        .WithMany("SentConnectionRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("Mentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Navigation("Mentees");

                    b.Navigation("ReceivedConnectionRequests");

                    b.Navigation("SentConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
