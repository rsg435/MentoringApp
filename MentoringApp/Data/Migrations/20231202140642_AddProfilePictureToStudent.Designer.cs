// <auto-generated />
using System;
using MentoringApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentoringApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231202140642_AddProfilePictureToStudent")]
    partial class AddProfilePictureToStudent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AreaOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "858d0d11-9329-4a70-ae39-e70bcbbbbf6c",
                            CourseName = "MSc Computing",
                            Email = "harry@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Harry Smith",
                            PasswordHash = "AQAAAAEAACcQAAAAEM1TELzasec+eKyY6eyb0xS7cdfuFVF8YvwB0+QwcNUPhSJO5jRpdvlW0IiA1P7ysw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "035eb834-4d35-418f-9eee-6ce3c86e9e76",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "harry@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "d06cadda-2837-4a92-9d0c-0cb6e2a67df8",
                            CourseName = "BSc Computer Science",
                            Email = "jiang@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Shuying Jiang",
                            PasswordHash = "AQAAAAEAACcQAAAAEEhR9uwmGE0JfdQMUo+U/kHBDgMM+zb2jiSa+dmlKhmcY9WSqAeYt7UL67uBZ5Lsyw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "34fe558c-0e14-4c31-9d0e-04f212d81875",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "jiang@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "9b84aec2-01d8-45c7-bc13-f52bcfa7b394",
                            CourseName = "MSc Big Data Analytics",
                            Email = "hakeem@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hakeem Kae-Kazim",
                            PasswordHash = "AQAAAAEAACcQAAAAEHJ5OcEE/Va56BDeWmGqrcSSMmGF6tAP0BW+JJ/gGFS607akigGBi4NltSFYD+BuqQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "7c86c6e9-d289-4f2d-bf17-2ade670a06fa",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "hakeem@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "4c8d3d3a-913b-4c87-b4cb-963ac65bba67",
                            CourseName = "BA History",
                            Email = "priyanka@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Priyanka Chopra",
                            PasswordHash = "AQAAAAEAACcQAAAAELfM+OUblDUY7YqOCKNnRk2f53C925/7JPxwfYzhunO56bvZWTht434yYaUjVZuznA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "eebe1a85-6d02-425f-b5a4-518bce9bc521",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "priyanka@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "1d82a928-9a71-4468-8953-35b17afbbb15",
                            CourseName = "BA Politics",
                            Email = "robin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Robin Hawthorn",
                            PasswordHash = "AQAAAAEAACcQAAAAEAtaZZRUBetbImXGJOZdxMJd9vrggIdasuaYHM9+f82bx7MSEULHLNkEbHws+I/u5w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "101204ff-c10b-4e6b-91c6-9a14d7034dde",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "robin@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "2de93bb8-17dc-4ba7-9442-70507fe20480",
                            CourseName = "BSc Management Studies",
                            Email = "jun@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jun Matsumoto",
                            PasswordHash = "AQAAAAEAACcQAAAAEP9sdtmjavdkC1QLuwjwWhwjyI263ISqe67rU3ZHRagahDc1SGx5u85bMML9EFM1YA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "06120409-b562-4b7a-ab73-c42461cc77a3",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "jun@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "a2a088b9-0fc8-40bf-b5a2-087a7d7cb32f",
                            CourseName = "BSc Zoology",
                            Email = "maria@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Maria Spiridakos",
                            PasswordHash = "AQAAAAEAACcQAAAAEP9QfQCA4gvn5ccme6s26XLNbyQH1GPu4M+q92o9qZzLBKODgVhuFY7oCQLPrMafeQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b4b6979a-f5df-4c59-bd9f-164d7f65f3a5",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "maria@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "66eecb98-5be6-4498-92ae-94ad8eb54120",
                            CourseName = "MSc Business Analytics",
                            Email = "john@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PasswordHash = "AQAAAAEAACcQAAAAEIl5ch832vH97sf5hoCSl8bo3TZW4zATVTqSqum0apVcum2qIHyMDfELLoDX0STM4A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "81ed11fc-336a-4df3-b473-98464967e8e5",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "john@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "cbb0a968-1d13-401d-844c-0050e96bba1c",
                            CourseName = "BSc Chemistry",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emily White",
                            PasswordHash = "AQAAAAEAACcQAAAAEMY/TiJVHsjJ5mlvy2Wrn0TQkKqtu79aIQw51YdakEUqbQZ9SSSD3fGrPnl1eoGdxw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "35ba807a-8454-4a9f-b781-9abf463c1a7e",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "emily@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "2e83e356-0556-487f-a8f6-d52f2cb6d5ba",
                            CourseName = "MSc IT Management",
                            Email = "bruno@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bruno Silva",
                            PasswordHash = "AQAAAAEAACcQAAAAEPI81jKWbBXrlJOIrJRQonecQrvAYZ0rfSKrUAMnQXUD8ENND7XsjrlTXkMaY54RyQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "cc18f574-0a15-46c2-a01f-c41a24dd1027",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "bruno@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "d72fca4d-c420-4d7f-a672-daabc175b7d3",
                            CourseName = "BSc Computer Science for Games",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Claire Martin",
                            PasswordHash = "AQAAAAEAACcQAAAAELeSuD4rqp3mhib1HUK8uy+Pq8EXpl2hMNx9ca15m9YtRPOofqrWtZIBe8K0b3F0dg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "a3fe1702-0689-4f35-9eb3-bc2ff6766950",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "claire@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "c28ad7d1-92c4-4a76-b016-c1dc2cbfa313",
                            CourseName = "BSc Artificial Intelligence",
                            Email = "qasim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Qasim Khan",
                            PasswordHash = "AQAAAAEAACcQAAAAED45PXM9nIbStMMul2soGNh2nZ+Y+/+0Nw7iQXg9dbuEoiW9JM+DnIjCaoQITAUHKw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "e442d690-a743-445b-b932-49471c91f219",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "qasim@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "43040ed2-c80b-4fc0-8968-239f46fd7357",
                            CourseName = "BSc Chemistry",
                            Email = "minho@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Min-ho Lee",
                            PasswordHash = "AQAAAAEAACcQAAAAEPb3JnuM2MAySJjLC6kPCs0r9l7jENiqnKBMRmPFyWFkPD/f9bIyZ29Hyp8aAHp0NA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "751cc180-dae6-491a-8c08-a272a831d452",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "minho@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Creative Arts",
                            ConcurrencyStamp = "71c77fe9-ac2e-4f78-9a5c-db4b6e27d067",
                            CourseName = "BA Printmaking",
                            Email = "olga@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Olga Nowak",
                            PasswordHash = "AQAAAAEAACcQAAAAEM82Kn8eI5oi87+naRkf8XUmKTkqci3XudFl9OK8DCzBjtVQ9jqOWxb4NMbDyEfOOw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "a7471ad1-405b-47a5-887d-22e779a17c70",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "olga@example.com"
                        });
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sheffield",
                            Name = "Sheffield Hallam University"
                        },
                        new
                        {
                            Id = 2,
                            City = "Sheffield",
                            Name = "The University of Sheffield"
                        },
                        new
                        {
                            Id = 3,
                            City = "Leeds",
                            Name = "Leeds Beckett University"
                        },
                        new
                        {
                            Id = 4,
                            City = "Oxford",
                            Name = "Oxford University"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("ReceivedConnectionRequests")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", "Student")
                        .WithMany("SentConnectionRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("Mentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Navigation("Mentees");

                    b.Navigation("ReceivedConnectionRequests");

                    b.Navigation("SentConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
