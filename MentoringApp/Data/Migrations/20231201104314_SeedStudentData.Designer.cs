// <auto-generated />
using System;
using MentoringApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentoringApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231201104314_SeedStudentData")]
    partial class SeedStudentData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AreaOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "b8e7054e-6d3e-4217-8c6d-8875da35e752",
                            CourseName = "MSc Computing",
                            Email = "harry@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Harry Smith",
                            PasswordHash = "AQAAAAEAACcQAAAAEKmwPZweXVTpd2JYCrJwoZwE8MDWvrKMr3vxuZe4tKnVvqvrl6eNTfoaTosz1F9Fzg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "d1c00913-7bef-49e5-873c-de643cc1cb65",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "harry@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "515d40c5-2add-443d-8bfb-b8df31971594",
                            CourseName = "BSc Computer Science",
                            Email = "jiang@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Shuying Jiang",
                            PasswordHash = "AQAAAAEAACcQAAAAEFjBbO+kiYJE70DOX4U4PRarIGL8f6bwU1S+toBVNaOaLpbieNuyUuZe8UclV+UwiA==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "1060e075-a8c2-4f78-b83b-23b0f38c18ab",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "jiang@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "83fa59b2-b883-4b53-ac24-7c73336729c2",
                            CourseName = "MSc Big Data Analytics",
                            Email = "hakeem@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hakeem Kae-Kazim",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9LqJStzDFYHMui/rPbbgvxHmD7ZI4YhN7z+FB3NGcD1KirPKZnLJjdGBJ9kq7J0Q==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "e1162ce9-85e9-4461-8473-0d5ae2f968da",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "hakeem@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "85474181-25a7-4f2c-9710-bd878e995d26",
                            CourseName = "BA History",
                            Email = "priyanka@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Priyanka Chopra",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMm829ayaM4KZaE92v32Tmipq+vk+LqZAESfMPGYJsmKAFsHE5gN1/Ctf8hH+Qi6Q==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "983ac23c-7a54-4871-904f-ba5027bce1bf",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "priyanka@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "1f2cf332-2646-417a-9f3c-d7c3f5a6003b",
                            CourseName = "BA Politics",
                            Email = "robin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Robin Hawthorn",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZZiXk5XwThSjaHzv75TZsikpMHfrqyt5B0QZ7mKSA5S0+6b5LcFODrjuOG9gCLbw==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "3ca12b0b-93ba-4cc2-a942-071263c3e158",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "robin@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "71a6940c-ae2a-4c25-87ae-88acc4e203b7",
                            CourseName = "BSc Management Studies",
                            Email = "jun@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jun Matsumoto",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVAcP7aVwXtTfHKUVGN/7NGIVXMI5LgxfeUtin2zY1gDFxRfQUtLdXyUFIHy47ezg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9dac025e-81b1-44f0-8597-3bd151866108",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "jun@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "f590d3b4-2bf3-4f41-84b4-9f7ca2cf0dfe",
                            CourseName = "BSc Zoology",
                            Email = "maria@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Maria Spiridakos",
                            PasswordHash = "AQAAAAEAACcQAAAAEOePfX0fYaJnwSzPl0XvLoo2v1O674ns6MJzskyM1pHev2Ov2NIw2S8G77WUJz4ODg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "1b8e5e05-724c-48b3-8d7e-f332b816c308",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "maria@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "cda61413-3003-40b6-9865-0c90a01cfd5a",
                            CourseName = "MSc Business Analytics",
                            Email = "john@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYkNDHAhkE0Qff7rBl1uzi9xOsnHaAOjvF0p8r6ieGBPM5aFqZWUEuStsOZKlQuBw==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9827f29d-5579-4567-8fee-a33c39c329b4",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "john@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "0f08e65b-1959-4d67-b8b6-7b86aa4235aa",
                            CourseName = "BSc Chemistry",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emily White",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKirlFwpGNSLCTXb35nO2I/YIL73WAhXr2TvlQs1v622AtW0mXj4hDKLsCZW7k8gA==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "d8af407c-4621-4c32-9da1-8198d4ef01e8",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "emily@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "79831ba1-066d-4380-83c8-fec22ac1c4dc",
                            CourseName = "MSc IT Management",
                            Email = "bruno@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bruno Silva",
                            PasswordHash = "AQAAAAEAACcQAAAAEJV6kytuUbn8YuaJV1mPukksMg14O/v6K5zNookMatG1QIB4EytKi+tdO9mjhWJIBQ==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "a7ba0115-4e27-4341-8d81-f25c3d64093f",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "bruno@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "80a8b3fd-5ff2-47cd-bd93-adf873bf4e83",
                            CourseName = "BSc Computer Science for Games",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Claire Martin",
                            PasswordHash = "AQAAAAEAACcQAAAAEDGdzhzuVKCRmJybocO/1CKCTLTf7XSH47zLQ+/pllGt3YgeyyMjRbOO2lf5g3GedQ==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "1a6e74ea-a354-465a-937c-b9990c92bd27",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "claire@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "4b40dc96-3611-4d15-9be0-a37cd9325e37",
                            CourseName = "BSc Artificial Intelligence",
                            Email = "qasim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Qasim Khan",
                            PasswordHash = "AQAAAAEAACcQAAAAEKhDbkIFKegW+mDrqDxlc4B5mnTt9/gchjEWqY65qFW8SNvizakeX77KPjS4apCkjw==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "2ad6adc7-b8cf-423a-b3ff-866ce386d02b",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "qasim@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "c827b27f-4bcf-4237-a387-a85606ae98c9",
                            CourseName = "BSc Chemistry",
                            Email = "minho@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Min-ho Lee",
                            PasswordHash = "AQAAAAEAACcQAAAAECxg4t4u86ZoTQOpJpgtMdxmigiKPLLT5o8jeuppKFQXeExESemJpTrv9zrTjKO0oQ==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "dab5d16d-9493-423c-a96b-eb76989e76bd",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "minho@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Creative Arts",
                            ConcurrencyStamp = "c43e65ee-82b0-45af-89a8-8638dd02f6aa",
                            CourseName = "BA Printmaking",
                            Email = "olga@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Olga Nowak",
                            PasswordHash = "AQAAAAEAACcQAAAAEOkLg1tV4mRVMbIIB17RzDZaTxNIY3s6zzDiL3HM5QMZWjTMxRrgLdBf43UpgMt/MQ==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "b1d36170-6ee5-434d-bfb3-200b6c71353e",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "olga@example.com"
                        });
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sheffield",
                            Name = "Sheffield Hallam University"
                        },
                        new
                        {
                            Id = 2,
                            City = "Sheffield",
                            Name = "The University of Sheffield"
                        },
                        new
                        {
                            Id = 3,
                            City = "Leeds",
                            Name = "Leeds Beckett University"
                        },
                        new
                        {
                            Id = 4,
                            City = "Oxford",
                            Name = "Oxford University"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("ReceivedConnectionRequests")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", "Student")
                        .WithMany("SentConnectionRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("Mentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Navigation("Mentees");

                    b.Navigation("ReceivedConnectionRequests");

                    b.Navigation("SentConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
