// <auto-generated />
using System;
using MentoringApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentoringApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231203105615_UpdateUserSeedDataAgain")]
    partial class UpdateUserSeedDataAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AreaOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IntroductionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "89bc6894-b311-4059-b438-bc9c5bcf51ba",
                            CourseName = "MSc Computing",
                            Email = "harry@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Harry Smith",
                            NormalizedEmail = "HARRY@EXAMPLE.COM",
                            NormalizedUserName = "HARRY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwNYTm8vAjg33PFmJYIzLn1RXasE2tkkka82LoiLIqMawPaW4Rwb8rgPNyBf0dGqg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "96209122-7b35-41b6-adf7-119f1f43f9b6",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "harry@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "104e92f4-787c-4260-92e2-d14e8e67def5",
                            CourseName = "BSc Computer Science",
                            Email = "jiang@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Shuying Jiang",
                            NormalizedEmail = "JIANG@EXAMPLE.COM",
                            NormalizedUserName = "JIANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYOzE0GD9E+Ke9eQFtzJRtnBRdYVbVuZ/h60psHIrVLj8YbhY5gexrLLy/CQGVieA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "6440a666-d0d1-4e06-876a-75ed4c0ea804",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "jiang@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "f9e4e7c8-2f9b-44c1-a291-bc0d284bf874",
                            CourseName = "MSc Big Data Analytics",
                            Email = "hakeem@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hakeem Kae-Kazim",
                            NormalizedEmail = "HAKEEM@EXAMPLE.COM",
                            NormalizedUserName = "HAKEEM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELu0VXVCSMlaZgrfSLwzFYydwO82vxhJzjBk1zqrE2r9qNC5My30Q0vBV1QO/1Cb+A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "3e20ef17-0399-4490-873e-6af5b45829ed",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "hakeem@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "c8ede3c6-ac15-4f5b-a365-7089d9dd842c",
                            CourseName = "BA History",
                            Email = "priyanka@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Priyanka Chopra",
                            NormalizedEmail = "PRIYANKA@EXAMPLE.COM",
                            NormalizedUserName = "PRIYANKA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKRcNts66fku8zFMedvv43MWP4emihetJAkg+43IVO4rggxIz9hxXA/t6Fzd62yFQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "576c17b9-2113-442f-8a47-e746a7e14183",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "priyanka@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "3aba105d-918d-4b19-aabf-7b59f24f1bfc",
                            CourseName = "BA Politics",
                            Email = "robin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Robin Hawthorn",
                            NormalizedEmail = "ROBIN@EXAMPLE.COM",
                            NormalizedUserName = "ROBIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENGInZk2HDxZ/QAobAsPmtuL8JzobcjXDzsNXSyGjFJLvJM/EPJEEuZFEHWt3lGR2A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "6c176318-6265-41a5-af06-0e77626134b9",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "robin@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "302dc751-60f6-4461-a19c-e792f782e6e4",
                            CourseName = "BSc Management Studies",
                            Email = "jun@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jun Matsumoto",
                            NormalizedEmail = "JUN@EXAMPLE.COM",
                            NormalizedUserName = "JUN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJnuMFuRndIq+hYesXddU/92xzIScqx6P6BWBQi/Qy7Rp+ZyF6aB1+00ur+6+fC5uw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "682369af-3bd3-4ea0-b288-efa5a2edc150",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "jun@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "b1f2e13e-cef0-44c8-86fa-2cb6c66a5a61",
                            CourseName = "BSc Zoology",
                            Email = "maria@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Maria Spiridakos",
                            NormalizedEmail = "MARIA@EXAMPLE.COM",
                            NormalizedUserName = "MARIA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJsS5j2FN/CET/EE90DxTi33TAq1Q30QB/kr+0s7gFI7Zj1y/G5oB8q9//Zl4/sMew==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "dec9657e-65a7-42d9-a333-3e3f4c066457",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "maria@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "c3e8f65b-2cf7-4174-bfa7-c663b7c49b37",
                            CourseName = "MSc Business Analytics",
                            Email = "john@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            NormalizedEmail = "JOHN@EXAMPLE.COM",
                            NormalizedUserName = "JOHN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB/sKj5aTB0OpLCf8yxOBj6lBRGITi3DBC9vIpN/4rmsdLGJxnrbNK+ZuTwxiQNNog==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "0117c45f-ebaa-402a-b89c-ddf182f9702c",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "john@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "a0065ad0-53fc-4daf-818b-fb697c0e9b79",
                            CourseName = "BSc Chemistry",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emily White",
                            NormalizedEmail = "EMILY@EXAMPLE.COM",
                            NormalizedUserName = "EMILY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP55VUpBq0scYDNSz+oCob/d7fd1WENJ1BvgLvh75SgTxj/vf5RjtD/JG7TVsnPKNg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "c4ba4e2a-b9aa-4077-80c4-fc349a362635",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "emily@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "bd477394-5665-417f-a880-05b8d2a6c183",
                            CourseName = "MSc IT Management",
                            Email = "bruno@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bruno Silva",
                            NormalizedEmail = "BRUNO@EXAMPLE.COM",
                            NormalizedUserName = "BRUNO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBqO9/c3s/LwyTVPrazmSDolON72uqXV65OakeUx/vtWRvdoVArWuur2XwkaSkhfww==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "79ca90d0-24a2-4657-91df-c5dc0737129e",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "bruno@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "08cd13da-8fb8-4e86-81f8-e6bfb08fbf51",
                            CourseName = "BSc Computer Science for Games",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Claire Martin",
                            NormalizedEmail = "CLAIRE@EXAMPLE.COM",
                            NormalizedUserName = "CLAIRE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPr833kh2CxMD2QZ+6oiJ0Bj4BlPsgGEkTouj6ITOsxfoHC3Kaf5vJ1Pd9fZtIaOZw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "22402b1c-00fe-4e31-8601-1f11ecb4b6d7",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "claire@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "9e7e9b25-2714-4c50-8b83-4ac651f06bfb",
                            CourseName = "BSc Artificial Intelligence",
                            Email = "qasim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Qasim Khan",
                            NormalizedEmail = "QASIM@EXAMPLE.COM",
                            NormalizedUserName = "QASIM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJuIOBa8P5/uBarzDn3usEjL+KhKbIWHGbzb7FQ3TIDAjv6GHNvVCXGxV3vaEuZp6w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "89ba4f32-05ec-4b4b-a8d4-0b803124fb48",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "qasim@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "d3b5b6fd-c021-4ebc-a9d7-472b87567d73",
                            CourseName = "BSc Chemistry",
                            Email = "minho@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Min-ho Lee",
                            NormalizedEmail = "MINHO@EXAMPLE.COM",
                            NormalizedUserName = "MINHO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGzrNzFiPd5KcT4CY6GvjN/qI/8QbyLN+NEujpDPRUn6mvUXN+HJ7FTttFIAON0CUw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "824078b0-c76d-4c2a-8a68-d4af09c436d3",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "minho@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Creative Arts",
                            ConcurrencyStamp = "bbd52168-170a-4054-b89e-f7be2a835c6b",
                            CourseName = "BA Printmaking",
                            Email = "olga@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Olga Nowak",
                            NormalizedEmail = "OLGA@EXAMPLE.COM",
                            NormalizedUserName = "OLGA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOvw3d3vJeT0+v6ssDykNlYjwhE3TqXfvbP3ukLjDy3EEmaK6u69+S9pgivtsyLdFg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "e82ce2ca-f7c4-4567-b8f2-0c22e63261bd",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "olga@example.com"
                        });
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sheffield",
                            Name = "Sheffield Hallam University"
                        },
                        new
                        {
                            Id = 2,
                            City = "Sheffield",
                            Name = "The University of Sheffield"
                        },
                        new
                        {
                            Id = 3,
                            City = "Leeds",
                            Name = "Leeds Beckett University"
                        },
                        new
                        {
                            Id = 4,
                            City = "Oxford",
                            Name = "Oxford University"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("ReceivedConnectionRequests")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.Student", "Student")
                        .WithMany("SentConnectionRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("Mentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Navigation("Mentees");

                    b.Navigation("ReceivedConnectionRequests");

                    b.Navigation("SentConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
