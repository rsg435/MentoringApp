// <auto-generated />
using System;
using MentoringApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentoringApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231202153449_AddIntroductionMessageToStudent")]
    partial class AddIntroductionMessageToStudent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AreaOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IntroductionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "d9971fad-ea60-438a-9a0c-6de02a3a5d09",
                            CourseName = "MSc Computing",
                            Email = "harry@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Harry Smith",
                            PasswordHash = "AQAAAAEAACcQAAAAEKIReURW3XsU1609RmCTrAknE3KJb6BSDjalaTToeohl20PT22Z2jZ35kgcR6GjetA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "a48f1ea1-2ffd-4406-b266-cd8973a3da46",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "harry@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "991da370-3a49-424f-8886-fa6a3de71476",
                            CourseName = "BSc Computer Science",
                            Email = "jiang@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Shuying Jiang",
                            PasswordHash = "AQAAAAEAACcQAAAAEE/i6ZP7GXYOAA/+5sA3U4UZZ0k6Xx9J24Nkd0nbz6aeHezetyZWY1akBqAbX8yMLQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "d605123f-1320-480b-b13f-f2f942542fd3",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "jiang@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "4ee29577-c57f-41f0-93b1-70edbdbe9d12",
                            CourseName = "MSc Big Data Analytics",
                            Email = "hakeem@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hakeem Kae-Kazim",
                            PasswordHash = "AQAAAAEAACcQAAAAECuXqnM9fA+cXNF3jRZXf6j3NaEK3Yx4Sk2kasojBBr58orKeFJf7HCFSid+Eu7B1Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "11a567f7-bdd0-44d8-8b8b-adc3ff85bde9",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "hakeem@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "0473f87b-2e12-430f-86a3-dbef678bf0ef",
                            CourseName = "BA History",
                            Email = "priyanka@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Priyanka Chopra",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQmRABPl9uYgzpKvk6Ab/9cfEou4a4wR0DNiumUu5zW+ozpkphAkyHxTOoHROPvBw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9bfdb0f5-6aef-49a5-8bc0-8e5fb383b2fe",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "priyanka@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Arts and Humanities",
                            ConcurrencyStamp = "75f41748-6421-4f99-a757-5aebde568bfa",
                            CourseName = "BA Politics",
                            Email = "robin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Robin Hawthorn",
                            PasswordHash = "AQAAAAEAACcQAAAAEDoWDN4gCQLqxGrQcm66iUkmt8dt2T7wRhWiWauNoAX4hKb0s6upKjeU0HTV3crPwQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "aecbf346-1825-410a-b5a1-2ee08e94cae5",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "robin@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "c71bf473-4479-4b05-b9b1-edb788a6b7fb",
                            CourseName = "BSc Management Studies",
                            Email = "jun@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jun Matsumoto",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4755g/En4Ls6vf9vpxMycF9+CYnOGytgP+27L8ks7LpvflcSzSzt5hsvIalB0hWg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "50d7d8dc-596b-48b9-8ff8-348578efd1c5",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "jun@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "7005aa6d-33a3-4b6e-aea4-269f3893dcd0",
                            CourseName = "BSc Zoology",
                            Email = "maria@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Maria Spiridakos",
                            PasswordHash = "AQAAAAEAACcQAAAAENw9jbQVcdgOpUZtViEZqVmCE5tCZBYXpHRn2HfffFPhLEauaks8uDP62MlJaKU+Lg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "22c3be75-fcb6-4b35-af94-63af89e73820",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "maria@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "51ff444a-9222-4394-848f-578ab3d6d351",
                            CourseName = "MSc Business Analytics",
                            Email = "john@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3C6sfJL8Dd4iTCLud6WpUxLqRsPqWMzMM3MSqOAa/yp3pTzuzSgYMvgv25cn6kxQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "5fd25d4f-3408-45f7-b899-845e2c24e656",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "john@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Science",
                            ConcurrencyStamp = "20252ba9-7eb7-4eb5-84fb-fe93d2e6ecae",
                            CourseName = "BSc Chemistry",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emily White",
                            PasswordHash = "AQAAAAEAACcQAAAAED0uWeSyP25fxRgFCCxozqmmoXOsIvaKmHyFbai+iiv4cYKfbgjYbfL8RfpBg2rFzw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "f76774de-d04d-49a8-b999-7e610da2abfc",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "emily@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "d7b8b1db-23d7-4990-9846-4d7ff5524b9d",
                            CourseName = "MSc IT Management",
                            Email = "bruno@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bruno Silva",
                            PasswordHash = "AQAAAAEAACcQAAAAEDE3QyJttLbtW0NHerf27xVf6VrfdI+fvU1JnUfSlLrpldghkE7p+kUgVRWc6uaRXg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "66c24a99-d83f-4a7e-a4c3-1e70aae18901",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "bruno@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "15ff2b82-6ef0-4433-8292-ff608d540421",
                            CourseName = "BSc Computer Science for Games",
                            Email = "emily@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Claire Martin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIZ6ZZ9v1kiOijzPs/rZ2pER3iwd5lMHf6xC6xct5WjYbGINMKRix0TaCudH3lJkQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "7955900b-f546-4a89-8c60-218556fefbb8",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            UserName = "claire@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Technology",
                            ConcurrencyStamp = "331a4737-7a7b-4721-acac-751e942d1d8b",
                            CourseName = "BSc Artificial Intelligence",
                            Email = "qasim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Qasim Khan",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxr9GeLnMMOgsDclWVww5XpdjZC2OJOMkdiCXtssw9Fuhtu1CNLmUCU5OufPzhSFw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "3d78048b-7303-4889-901b-118861da61e1",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "qasim@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Business",
                            ConcurrencyStamp = "eaee20c1-f964-430b-a14a-958be9c3811a",
                            CourseName = "BSc Chemistry",
                            Email = "minho@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Min-ho Lee",
                            PasswordHash = "AQAAAAEAACcQAAAAED64fNCYbLw71ItltZEO3oDhqsGy6POq8XcbAjX1z53XqWPNXO+f8ZuGweMGWTzSUA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "3908d724-5876-457f-80bb-cd34e9f9ecb8",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            UserName = "minho@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            AreaOfStudy = "Creative Arts",
                            ConcurrencyStamp = "324caaca-222e-4602-a83a-be3a4be17c97",
                            CourseName = "BA Printmaking",
                            Email = "olga@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Olga Nowak",
                            PasswordHash = "AQAAAAEAACcQAAAAECg6qTyrub1ZyBnnpz+h3/OZzQ9VSKUmQre8nIawqbWaAgW+Kbna+Ym9rcIiglNrlA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "69a7869c-7818-4139-be17-8a29b9239536",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            UserName = "olga@example.com"
                        });
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sheffield",
                            Name = "Sheffield Hallam University"
                        },
                        new
                        {
                            Id = 2,
                            City = "Sheffield",
                            Name = "The University of Sheffield"
                        },
                        new
                        {
                            Id = 3,
                            City = "Leeds",
                            Name = "Leeds Beckett University"
                        },
                        new
                        {
                            Id = 4,
                            City = "Oxford",
                            Name = "Oxford University"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentoringApp.Data.Models.ConnectionRequest", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("ReceivedConnectionRequests")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", "Student")
                        .WithMany("SentConnectionRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", "Mentor")
                        .WithMany("Mentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentoringApp.Data.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentoringApp.Data.Models.Student", b =>
                {
                    b.Navigation("Mentees");

                    b.Navigation("ReceivedConnectionRequests");

                    b.Navigation("SentConnectionRequests");
                });

            modelBuilder.Entity("MentoringApp.Data.Models.University", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
